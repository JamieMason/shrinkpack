{
    "parser": "espree",
    "plugins": [

    ],
    "env": {
        "amd": false,
        "browser": false,
        "es6": false,
        "jasmine": false,
        "jquery": false,
        "meteor": false,
        "mocha": false,
        "node": true,
        "phantomjs": false,
        "prototypejs": false,
        "shelljs": false,
        "worker": false
    },
    "ecmaFeatures": {
        "arrowFunctions": false,
        "binaryLiterals": false,
        "blockBindings": false,
        "classes": false,
        "defaultParams": false,
        "destructuring": false,
        "forOf": false,
        "generators": false,
        "globalReturn": false,
        "jsx": true,
        "modules": false,
        "objectLiteralComputedProperties": false,
        "objectLiteralDuplicateProperties": false,
        "objectLiteralShorthandMethods": false,
        "objectLiteralShorthandProperties": false,
        "octalLiterals": false,
        "regexUFlag": false,
        "regexYFlag": false,
        "restParams": false,
        "spread": false,
        "superInFunctions": false,
        "templateStrings": false,
        "unicodeCodePointEscapes": false
    },
    "rules": {

        /*
         * POSSIBLE ERRORS
         */

        // disallow or enforce trailing commas
        "comma-dangle": [2, "never"],
        // disallow assignment in conditional expressions
        "no-cond-assign": 2,
        // disallow use of console (off by default in the node environment)
        "no-console": 0,
        // disallow use of constant expressions in conditions
        "no-constant-condition": 2,
        // disallow control characters in regular expressions
        "no-control-regex": 1,
        // disallow use of debugger
        "no-debugger": 2,
        // disallow duplicate arguments in functions
        "no-dupe-args": 2,
        // disallow duplicate keys when creating object literals
        "no-dupe-keys": 2,
        // disallow a duplicate case label.
        "no-duplicate-case": 2,
        // disallow empty statements
        "no-empty": 1,
        // disallow the use of empty character classes in regular expressions
        "no-empty-character-class": 1,
        // disallow assigning to the exception in a catch block
        "no-ex-assign": 2,
        // disallow double-negation boolean casts in a boolean context
        "no-extra-boolean-cast": 1,
        // disallow unnecessary semicolons
        "no-extra-semi": 2,
        // disallow overwriting functions written as function declarations
        "no-func-assign": 2,
        // disallow function or variable declarations in nested blocks
        "no-inner-declarations": 2,
        // disallow invalid regular expression strings in the RegExp constructor
        "no-invalid-regexp": 2,
        // disallow irregular whitespace outside of strings and comments
        "no-irregular-whitespace": 2,
        // disallow negation of the left operand of an in expression
        "no-negated-in-lhs": 2,
        // disallow the use of object properties of the global object (Math and JSON) as functions
        "no-obj-calls": 2,
        // disallow multiple spaces in a regular expression literal
        "no-regex-spaces": 1,
        // disallow reserved words being used as object literal keys (off by default)
        "no-reserved-keys": 0,
        // disallow sparse arrays
        "no-sparse-arrays": 2,
        // disallow unreachable statements after a return, throw, continue, or break statement
        "no-unreachable": 2,
        // disallow comparisons with the value NaN
        "use-isnan": 2,
        // Ensure JSDoc comments are valid (off by default)
        "valid-jsdoc": 1,
        // Ensure that the results of typeof are compared against a valid string
        "valid-typeof": 2,

        /*
         * BEST PRACTICES
         */

        // Enforces getter/setter pairs in objects (off by default)
        "accessor-pairs": 0,
        // treat var statements as if they were block scoped (off by default)
        "block-scoped-var": 0,
        // specify the maximum cyclomatic complexity allowed in a program (off by default)
        "complexity": [1, 3],
        // require return statements to either always or never specify values
        "consistent-return": 1,
        // specify curly brace conventions for all control statements
        "curly": [2, "all"],
        // require default case in switch statements (off by default)
        "default-case": 0,
        // encourages use of dot notation whenever possible
        "dot-notation": 1,
        // enforces consistent newlines before or after dots (off by default)
        "dot-location": [1, "property"],
        // require the use of === and !==
        "eqeqeq": 2,
        // make sure for-in loops have an if statement (off by default)
        "guard-for-in": 0,
        // disallow the use of alert, confirm, and prompt
        "no-alert": 2,
        // disallow use of arguments.caller or arguments.callee
        "no-caller": 2,
        // disallow division operators explicitly at beginning of regular expression (off by default)
        "no-div-regex": 1,
        // disallow else after a return in an if (off by default)
        "no-else-return": 0,
        // disallow use of labels for anything other then loops and switches
        "no-empty-label": 2,
        // disallow comparisons to null without a type-checking operator (off by default)
        "no-eq-null": 2,
        // disallow use of eval()
        "no-eval": 2,
        // disallow adding to native types
        "no-extend-native": 2,
        // disallow unnecessary function binding
        "no-extra-bind": 2,
        // disallow fallthrough of case statements
        "no-fallthrough": 2,
        // disallow the use of leading or trailing decimal points in numeric literals (off by default)
        "no-floating-decimal": 2,
        // disallow use of eval()-like methods
        "no-implied-eval": 2,
        // disallow usage of __iterator__ property
        "no-iterator": 2,
        // disallow use of labeled statements
        "no-labels": 2,
        // disallow unnecessary nested blocks
        "no-lone-blocks": 2,
        // disallow creation of functions within loops
        "no-loop-func": 1,
        // disallow use of multiple spaces
        "no-multi-spaces": 2,
        // disallow use of multiline strings
        "no-multi-str": 2,
        // disallow reassignments of native objects
        "no-native-reassign": 2,
        // disallow use of new operator for Function object
        "no-new-func": 1,
        // disallows creating new instances of String, Number, and Boolean
        "no-new-wrappers": 2,
        // disallow use of new operator when not part of the assignment or comparison
        "no-new": 2,
        // disallow use of octal escape sequences in string literals, such as var foo = "Copyright \251";
        "no-octal-escape": 2,
        // disallow use of octal literals
        "no-octal": 2,
        // disallow reassignment of function parameters (off by default)
        "no-param-reassign": 1,
        // disallow use of process.env (off by default)
        "no-process-env": 1,
        // disallow usage of __proto__ property
        "no-proto": 2,
        // disallow declaring the same variable more than once
        "no-redeclare": 2,
        // disallow use of assignment in return statement
        "no-return-assign": 2,
        // disallow use of javascript: urls.
        "no-script-url": 2,
        // disallow comparisons where both sides are exactly the same (off by default)
        "no-self-compare": 2,
        // disallow use of comma operator
        "no-sequences": 2,
        // restrict what can be thrown as an exception (off by default)
        "no-throw-literal": 2,
        // disallow usage of expressions in statement position
        "no-unused-expressions": 2,
        // disallow use of void operator (off by default)
        "no-void": 2,
        // disallow usage of configurable warning terms in comments e.g. TODO or FIXME (off by default)
        "no-warning-comments": 1,
        // disallow use of the with statement
        "no-with": 2,
        // require use of the second argument for parseInt() (off by default)
        "radix": 2,
        // requires to declare all vars on top of their containing scope (off by default)
        "vars-on-top": 0,
        // require immediate function invocation to be wrapped in parentheses (off by default)
        "wrap-iife": 2,
        // require or disallow Yoda conditions
        "yoda": 2,

        /*
         * STRICT MODE
         */

        "strict": [2, "global"],

        /*
         * VARIABLES
         */

        // disallow the catch clause parameter name being the same as a variable in the outer scope (off by default in the node environment)
        "no-catch-shadow": 2,
        // disallow deletion of variables
        "no-delete-var": 2,
        // disallow labels that share a name with a variable
        "no-label-var": 2,
        // disallow shadowing of names such as arguments
        "no-shadow-restricted-names": 2,
        // disallow declaration of variables already declared in the outer scope
        "no-shadow": 2,
        // disallow use of undefined when initializing variables
        "no-undef-init": 2,
        // disallow use of undeclared variables unless mentioned in a /*global */ block
        "no-undef": 2,
        // disallow use of undefined variable (off by default)
        "no-undefined": 2,
        // disallow declaration of variables that are not used in the code
        "no-unused-vars": 1,
        // disallow use of variables before they are defined
        "no-use-before-define": [2, "nofunc"],

        /*
         * STYLISTIC ISSUES
         */

        // enforce one true brace style (off by default)
        "brace-style": [2, "1tbs", {
            "allowSingleLine": true
        }],
        // require camel case names
        "camelcase": [2, {
            "properties": "always"
        }],
        // enforce spacing before and after comma
        "comma-spacing": [2, {
            "before": false,
            "after": true
        }],
        // enforce one true comma style (off by default)
        "comma-style": [2, "last"],
        // enforces consistent naming when capturing the current execution context (off by default)
        "consistent-this": [2, "self"],
        // enforce newline at the end of file, with no multiple empty lines
        "eol-last": 2,
        // require function expressions to have a name (off by default)
        "func-names": 0,
        // enforces use of function declarations or expressions (off by default)
        "func-style": [2, "declaration"],
        // this option sets a specific tab width for your code (off by default)
        "indent": [2, 4],
        // enforces spacing between keys and values in object literal properties
        "key-spacing": [2, {
            "beforeColon": false,
            "afterColon": true
        }],
        // enforces empty lines around comments (off by default)
        "lines-around-comment": [2, {
            "beforeBlockComment": true,
            "afterBlockComment": true,
            "beforeLineComment": false,
            "afterLineComment": false
        }],
        // disallow mixed 'LF' and 'CRLF' as linebreaks (off by default)
        "linebreak-style": 2,
        // specify the maximum depth callbacks can be nested (off by default)
        "max-nested-callbacks": [1, 2],
        // require a capital letter for constructors
        "new-cap": 2,
        // disallow the omission of parentheses when invoking a constructor with no arguments
        "new-parens": 2,
        // allow/disallow an empty newline after var statement (off by default)
        "newline-after-var": 0,
        // disallow use of the Array constructor
        "no-array-constructor": 2,
        // disallow use of the continue statement (off by default)
        "no-continue": 1,
        // disallow comments inline after code (off by default)
        "no-inline-comments": 2,
        // disallow if as the only statement in an else block (off by default)
        "no-lonely-if": 2,
        // disallow mixed spaces and tabs for indentation
        "no-mixed-spaces-and-tabs": 2,
        // disallow multiple empty lines (off by default)
        "no-multiple-empty-lines": [2, {
            "max": 1
        }],
        // disallow nested ternary expressions (off by default)
        "no-nested-ternary": 2,
        // disallow use of the Object constructor
        "no-new-object": 2,
        // disallow space between function identifier and application
        "no-spaced-func": 2,
        // disallow the use of ternary operators (off by default)
        "no-ternary": 0,
        // disallow trailing whitespace at the end of lines
        "no-trailing-spaces": 2,
        // disallow dangling underscores in identifiers
        "no-underscore-dangle": 0,
        // disallow the use of Boolean literals in conditional expressions (off by default)
        "no-unneeded-ternary": 2,
        // disallow wrapping of non-IIFE statements in parens
        "no-extra-parens": [2, "functions"],
        // allow or disallow one variable declaration per function (off by default)
        "one-var": [2, "never"],
        // require assignment operator shorthand where possible or prohibit it entirely (off by default)
        "operator-assignment": 0,
        // enforce operators to be placed before or after line breaks (off by default)
        "operator-linebreak": [2, "after"],
        // enforce padding within blocks (off by default)
        "padded-blocks": [0, "always"],
        // require quotes around object literal property names (off by default)
        "quote-props": [2, "as-needed"],
        // specify whether backticks, double or single quotes should be used
        "quotes": [2, "single", "avoid-escape"],
        // enforce spacing before and after semicolons
        "semi-spacing": [2, {
            "before": false,
            "after": true
        }],
        // require or disallow use of semicolons instead of ASI
        "semi": [2, "always"],
        // sort variables within the same declaration block (off by default)
        "sort-vars": 0,
        // require a space after certain keywords (off by default)
        "space-after-keywords": [2, "always"],
        // require or disallow space before blocks (off by default)
        "space-before-blocks": [2, "always"],
        // require or disallow space before function opening parenthesis (off by default)
        "space-before-function-paren": [2, "never"],
        // require or disallow spaces inside brackets (off by default)
        "object-curly-spacing": [2, "never"],
        "array-bracket-spacing": [2, "never"],
        "computed-property-spacing": [2, "never"],
        // require or disallow spaces inside parentheses (off by default)
        "space-in-parens": [2, "never"],
        // require spaces around operators
        "space-infix-ops": [2, {
            "int32Hint": false
        }],
        // require a space after return, throw, and case
        "space-return-throw-case": 2,
        // Require or disallow spaces before/after unary operators (words on by default, nonwords off by default)
        "space-unary-ops": [2, {
            "words": true,
            "nonwords": false
        }],
        // require or disallow a space immediately following opening comment (off by default)
        "spaced-comment": [2, "always"],
        // require regex literals to be wrapped in parentheses (off by default)
        "wrap-regex": 0,

        /*
         * LEGACY
         */

        // specify the maximum depth that blocks can be nested (off by default)
        "max-depth": 0,
        // specify the maximum length of a line in your program (off by default)
        "max-len": 0,
        // limits the number of parameters that can be used in the function declaration. (off by default)
        "max-params": [1, 4],
        // specify the maximum number of statement allowed in a function (off by default)
        "max-statements": 0,
        // disallow use of bitwise operators (off by default)
        "no-bitwise": 1,
        // disallow use of unary operators, ++ and -- (off by default)
        "no-plusplus": 0,

    }
}
